# Makefile for creating and uploading CoreDNS docker image.
#
# First you should do a release and then call this Makefile to create and upload
# the image.
#
# 1. Reuse the issue for this release
# 2. In an issue give the command: /docker VERSION
#    Where VERSION is the version of the release.
# 3. (to test as release /docker -t VERSION can be used.
#
# To release we run, these target from the this Makefile.docker ordered like:
# * make release
# * make docker-push
#
# Testing docker is done e.g. via:
#
# export DOCKER_PASSWORD=<pass>
# export DOCKER_LOGIN=miek
# make VERSION=x.y.z DOCKER=miek -f Makefile.docker release docker-push

ifeq (, $(shell which curl))
    $(error "No curl in $$PATH, please install")
endif
ifeq (, $(shell which jq))
    $(error "No jq in $$PATH, please install")
endif

# VERSION is the version we should download and use.
VERSION:=
# DOCKER is the docker image repo we need to push to.
DOCKER:=
GITHUB:=https://github.com/coredns/coredns/releases/download
# mips is not in LINUX_ARCH because it's not supported by docker manifest. Keep this list in sync with the one in Makefile.release
LINUX_BASE_ARCH:=amd64 arm arm64 ppc64le s390x
LINUX_RISV_ARCH:=riscv64
LINUX_ARCH:=$(LINUX_RISV_ARCH) $(LINUX_BASE_ARCH)
space := $(subst ,, )
comma := ,
DOCKER_ARCH_PLATFORM := linux/$(subst $(space),$(comma)linux/,$(LINUX_BASE_ARCH))

DOCKER_BIN_ARCH_BASE:=build/docker/linux
DOCKER_IMAGE_NAMES:=ghcr.io/grumps/coredns,grumps/coredns
DOCKER_IMAGE_NAMES_LIST:=$(subst $(comma),$(space),$(DOCKER_IMAGE_NAMES))
DOCKER_IMAGE_OPTS:=$(foreach image,$(DOCKER_IMAGE_NAMES_LIST),-t $(image))
DOCKER_IMAGE_W_VERSION_OPTS:=$(foreach image,$(DOCKER_IMAGE_NAMES_LIST),-t $(image):$(VERSION))
DOCKER_BUILDX_EXTRA_ARGS:=--push
RISCV_DOCKER_ID_FILE:=$(shell mktemp)
ifeq ($(DRY_RUN),1)
DOCKER_BUILDX_EXTRA_ARGS:=
endif


all:
	@echo Use the 'release' target to download released binaries and build containers per arch, 'docker-build' to build and push a multi arch manifest.
	echo $(DOCKER_IMAGE_LIST_VERSIONED)
	echo $(DOCKER_IMAGE_LIST_LATEST)

release: image-download docker-build

.PHONY: image-download
image-download:
ifeq ($(VERSION),)
	$(error "Please specify a version use. Use VERSION=<version>")
endif
	try_max=20; try_sleep=30; \
	for arch in $(LINUX_ARCH); do \
		asset=coredns_$(VERSION)_linux_$${arch}.tgz; \
		for i in $$(seq 1 $$try_max ); do \
			if [ $$(curl -I -L -s -o /dev/null -w "%{http_code}" $(GITHUB)/v$(VERSION)/$$asset) -eq 200 ]; then \
				echo "$$asset is live" ; break; \
			else  \
				echo "$$asset is not live yet..." ; sleep $$try_sleep ; \
			fi ; \
		done ; \
		if [ $$i -eq $$try_max ]; then \
			echo "$$asset is not live after $$try_max tries" ; exit 1; \
		fi ; \
	done
	@rm -rf $(DOCKER_BIN_ARCH_BASE)
	@mkdir -p $(DOCKER_BIN_ARCH_BASE)
	@# 1. Copy appropriate coredns binary to $(DOCKER_BIN_ARCH_BASE)/<arch>
	@# 2. Copy Dockerfile into the correct dir as well.
	@# 3. Unpack the tgz from github into 'coredns' binary.
	for arch in $(LINUX_ARCH); do \
		outpath=$${arch} ; \
		[ "$${arch}" = "arm" ] && outpath="arm/v7" ; \
		mkdir -p $(DOCKER_BIN_ARCH_BASE)/$${outpath}; \
		curl -sL $(GITHUB)/v$(VERSION)/coredns_$(VERSION)_linux_$${arch}.tgz > $(DOCKER_BIN_ARCH_BASE)/$${outpath}/coredns.tgz && \
			( cd $(DOCKER_BIN_ARCH_BASE)/$${outpath}; tar xf coredns.tgz && rm coredns.tgz ); \
	done


.PHONY: docker-build
docker-build: image-download
ifeq ($(DOCKER_IMAGE_NAMES),)
	$(error "Please specify Docker registry to use. Use DOCKER=coredns for releases")
else
	@# Build risvc image, save the sha to a file so we can update the rest of our release with this image
	docker buildx build \
		--build-context=corednsbins=build \
		--platform linux/$(LINUX_RISV_ARCH) \
		--build-arg=DEBIAN_IMAGE=debian:unstable-slim \
		--iidfile $(RISCV_DOCKER_ID_FILE) \
		--build-arg=BASE=ghcr.io/go-riscv/distroless/static-unstable:nonroot \
		$(DOCKER_BUILDX_EXTRA_ARGS) $(DOCKER_IMAGE_OPTS) .
	@# Build and push all but riscv images
	docker buildx build \
		--build-context=corednsbins=build \
		--platform $(DOCKER_ARCH_PLATFORM) \
		$(DOCKER_BUILDX_EXTRA_ARGS) $(DOCKER_IMAGE_W_VERSION_OPTS) .
	ls $(RISCV_DOCKER_ID_FILE)
	@# Append the risvc image to the release if we have pushed images to a registry
	if [ "$(DOCKER_BUILDX_EXTRA_ARGS)" != "$${DOCKER_BUILDX_EXTRA_ARGS%"--push"*}" ]; then \
		docker buildx imagetools create \
			--append $(firstword $(DOCKER_IMAGE_NAMES_LIST))@$$(cat ${RISCV_DOCKER_ID_FILE}) \
			$(DOCKER_IMAGE_W_VERSION_OPTS); \
	fi

endif
